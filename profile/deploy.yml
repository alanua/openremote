# OpenRemote v3
#
# Install Docker Community edition (https://docker.com/) on Windows, macOS, or Linux.
#
# Start the stack with:
#
#   docker-compose -p openremote -f profile/demo.yml up
#
# Note that you must extend this configuration to complete it with service
# dependencies and volume mappings, see demo.yml.
#
version: '2.2'

services:

  # The frontend proxy manages SSL certificates, terminates SSL/TLS connections and forwards them to the backend.
  proxy:

    # Image will be built when not already in the cache or when `--build` option is supplied to `docker-compose up`
    build:
      context: '../proxy'

    # Image will be pulled when using the `docker-compose pull` command or `docker-compose up --no-build`
    image: openremote/proxy:latest

    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Zurich

      # The public host name of this OpenRemote installation. Set this to request/manage an SSL
      # certificate with the free https://letsencrypt.org/ provider. The default 'localhost' will
      # rely on a baked-in self-signed certificate. If you change this, adjust manager#IDENTITY_NETWORK_HOST.
      # DOMAINNAME: localhost

      # Provide your own email address for your SSL certificates with Let's Encrypt. This should
      # be set when DOMAINNAME is not 'localhost'.
      # LE_EMAIL: 'no-reply@openremote.io'

      # Enable --staging will manage fake certificates, so avoid hitting the rate limits of Let's Encrypt
      # when testing (this is important, you are limited to 5 duplicate certificates per week!)
      # LE_EXTRA_ARGS: '--staging --logs-dir=/etc/letsencrypt'

      # Traffic should be forwarded to this service (defaults to manager:8080)
      # PROXY_BACKEND_HOST: manager
      # PROXY_BACKEND_PORT: 8080

      # The proxy supports up to 10 custom redirects from hostname to any path on the
      # backend service. This can be used to give consoles a vanity domain name.
      # PROXY_HOST_REDIRECT_1_NAME: www.my-console-master.tld
      # PROXY_HOST_REDIRECT_1_TARGET: /console/master
      # PROXY_HOST_REDIRECT_2_NAME: www.my-console-customer-a.tld
      # PROXY_HOST_REDIRECT_2_TARGET: /console/customerA
      # PROXY_HOST_REDIRECT_3_NAME: ...

      # Customize proxy log, defaults to 'notice', requests are logged at 'info'.
      # Available levels are: emerg, alert, crit, err, warning, notice, info, debug
      # PROXY_LOGLEVEL: 'notice'

    # Run proxy, obtain and automatically renew SSL certificates if DOMAINNAME is not localhost. Use
    # the command 'help' to get a list of all options.
    command: run

    # Expose a public web service mapped to ports on the host.
    ports:
      - "80:80"
      - "443:443"

    # Resource limits
    mem_limit: 50m
    memswap_limit: 50m

    # Configure logging of the container
    logging:
        options:
            max-size: 10m

  # The API gateway and Manager web application.
  manager:

    # Image will be built when not already in the cache or when `--build` option is supplied to `docker-compose up`
    build: '../manager/build/install/manager'

    # Image will be pulled when using the `docker-compose pull` command or `docker-compose up --no-build`
    image: openremote/manager:latest

    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Zurich

      # If developer mode is enabled, all setup tasks will be executed on application startup.
      # This will clean all data in Keycloak and the Manager database, and then import demo/test
      # data. Some caching and other runtime performance-optimizations will also be disabled.
      DEV_MODE: 'false'

      # This switch can wipe all your Manager and Keycloak data, this is the factory reset!
      SETUP_WIPE_CLEAN_INSTALL: 'true'
      # When you are ready to permanently install your project, replace it with the next lines...
      # SETUP_WIPE_CLEAN_INSTALL: # Allow override on CLI
      # KEYCLOAK_PASSWORD: # Allow override on CLI

      # Optional: Configure SMTP smart host for Keycloak, to send password reset emails etc.
      #SETUP_KEYCLOAK_EMAIL_HOST: smtp-host.demo.tld
      #SETUP_KEYCLOAK_EMAIL_USER: 'smtp-user'
      #SETUP_KEYCLOAK_EMAIL_PASSWORD: 'smtp-password'
      #SETUP_KEYCLOAK_EMAIL_PORT: 25
      #SETUP_KEYCLOAK_EMAIL_AUTH: 'true'
      #SETUP_KEYCLOAK_EMAIL_TLS: 'true'
      #SETUP_KEYCLOAK_EMAIL_FROM: 'noreply@demo.tld'

      # Other demo data can be imported as needed, these examples only use the simulator protocol.
      SETUP_IMPORT_DEMO_USERS: 'true'
      SETUP_IMPORT_DEMO_ASSETS: 'true'
      SETUP_IMPORT_DEMO_RULES: 'true'

      # Create a demo agent with example configurations for all built-in protocols:
      #
      # - KNX IP gateway
      # - Velbus IP gateway or serial bridge
      # - UPnP (asset discovery only)
      #
      SETUP_IMPORT_DEMO_AGENT: 'true'
      SETUP_IMPORT_DEMO_AGENT_KNX: 'false'
      # SETUP_IMPORT_DEMO_AGENT_KNX_GATEWAY_IP: '10.0.0.11'
      # SETUP_IMPORT_DEMO_AGENT_KNX_LOCAL_IP: '10.0.0.12'
      SETUP_IMPORT_DEMO_AGENT_VELBUS: 'false'
      # SETUP_IMPORT_DEMO_AGENT_VELBUS_COM_PORT: 'COM3'
      SETUP_IMPORT_DEMO_AGENT_UPNP: 'false'
      # TODO: Additional docker settings are necessary to use com ports and multicast from within containers

      # The public host name of this OpenRemote installation. This name is used in bearer tokens
      # and must be the name you access the web services under. If you change proxy#DOMAINNAME, also
      # change this to match.
      # IDENTITY_NETWORK_HOST: localhost

      # Set if SSL is enabled on the frontend reverse proxy and all internal proxies should assume https
      IDENTITY_NETWORK_SECURE: 'true'

      # The public port of this OpenRemote installation.
      IDENTITY_NETWORK_WEBSERVER_PORT: 443

      # The service-internal JDBC connection URL for the database service.
      DATABASE_CONNECTION_URL: jdbc:postgresql://postgresql/openremote

      # The database connection settings, passwords should be changed in production!
      DATABASE_USERNAME: openremote
      DATABASE_PASSWORD: CHANGE_ME_DB_USER_PASSWORD
      DATABASE_MIN_POOL_SIZE: 5
      DATABASE_MAX_POOL_SIZE: 20
      DATABASE_CONNECTION_TIMEOUT_SECONDS: 300

      # The service-internal host name and port of the identity provider.
      KEYCLOAK_HOST: keycloak
      KEYCLOAK_PORT: 8080

      # Optional: Console applications can register for push notifications through FCM.
      # NOTIFICATION_FIREBASE_URL: https://fcm.googleapis.com/fcm/send
      # NOTIFICATION_FIREBASE_API_KEY = '...'

      # Optional: Custom location of the static console applications, each subdirectory must
      # have the name of a realm to which the console app belongs.
      # CONSOLES_DOCROOT: '/deployment/consoles'

      # Optional: Custom location of the Manager UI customisations.
      # UI_DOCROOT: '/deployment/ui'

      # Optional: Provide a path to the map tiles database file (see https://openmaptiles.com/).
      # MAP_TILES_PATH: '/deployment/map/mapdata.mbtiles'

      # Optional: Override the map settings such as center location and zoom when opening the
      # manager's map, as well as other style details and colours.
      # MAP_SETTINGS_PATH: '/deployment/map/mapsettings.json'

      # Override logging.properties with a file of your choice.
      # LOGGING_CONFIG_FILE: '/deployment/logging.properties'

      # The number of threads and therefore rules engines that can be instantiated (default unlimited).
      # RULES_THREADS_MAX: 32

      # The number of threads and therefore background tasks that can be executed at the same
      # time. Used by scheduled, usually short-lived and non-blocking tasks, such as protocols
      # polling a remote service at regular interval, or the internal checks for expired client
      # subscriptions on the event bus (default depends on detected CPU cores).
      # SCHEDULED_TASKS_THREADS_MAX: 4

      # When asset attributes are enabled for rule events, each value update will be an event fact
      # in a rules knowledge session. You can set the global default expiration time span, after which
      # rule event facts are retracted automatically. Default is 1 hour.
      # RULE_EVENT_EXPIRES: '1h'

      # The identity provider implementation to use for managing user identities, roles, and
      # access authorization. The default is Keycloak, which requires a separate service but
      # provides full multi-tenancy identity and role management. The basic provider supports
      # only superusers and their text passwords, managed in a simple database table.
      # IDENTITY_PROVIDER: 'basic'
      # SETUP_BASIC_IDENTITY_ADMIN_PASSWORD: 'secret'

      # Location of the static manager (UI and API) resources, you don't need to override this
      # unless you want to deploy a modified version of the Manager UI.
      # MANAGER_DOCROOT: 'manager/client/src/main/webapp'

      # Custom JVM options (increase heap size if required)
      JAVA_OPTS: '-Xms400m -Xmx400m
                  -XX:CompressedClassSpaceSize=25m -XX:MaxMetaspaceSize=150m
                  -XX:InitialCodeCacheSize=25m -XX:ReservedCodeCacheSize=25m
                  -XX:MaxDirectMemorySize=25m
                  -XX:NativeMemoryTracking=summary
                  -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/javadump.core.hprof'

    # Resource limits
    mem_limit: 700m
    memswap_limit: 700m

    # Configure logging of the container, see deployment/logging.properties
    logging:
        options:
            max-size: 10m

  # Keycloak identity provider
  keycloak:

    # Image will be built when not already in the cache or when `--build` option is supplied to `docker-compose up`
    build: '../keycloak'

    # Image will be pulled when using the `docker-compose pull` command or `docker-compose up --no-build`
    image: openremote/keycloak:latest

    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Zurich

      # Switch to DEBUG to diagnose Keycloak problems.
      KEYCLOAK_LOGLEVEL: INFO

      # The master realm superuser, you should not change this.
      KEYCLOAK_USER: admin

      # CHANGE THIS PASSWORD BEFORE STARTING THE STACK! THIS IS ONLY FOR DEMO!
      KEYCLOAK_PASSWORD: secret
      # When you are ready to permanently install your project, replace it with the next line ...
      # KEYCLOAK_PASSWORD: # Allow override on CLI

      # Configure how Keycloak connects to the database
      POSTGRES_DATABASE: openremote
      POSTGRES_USER: openremote
      POSTGRES_PASSWORD: CHANGE_ME_DB_USER_PASSWORD

      # Custom JVM options (increase heap size if required)
      JAVA_OPTS: '-Xms300m -Xmx300m
                  -XX:CompressedClassSpaceSize=25m -XX:MaxMetaspaceSize=150m
                  -XX:InitialCodeCacheSize=25m -XX:ReservedCodeCacheSize=25m
                  -XX:MaxDirectMemorySize=25m
                  -XX:NativeMemoryTracking=summary
                  -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/javadump.core.hprof
                  -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true'

    # Resource limits
    mem_limit: 600m
    memswap_limit: 600m

    # Configure logging of the container
    logging:
        options:
            max-size: 10m

  # PostgreSQL DBMS
  postgresql:

    # Image will be built when not already in the cache or when `--build` option is supplied to `docker-compose up`
    build: '../postgresql'

    # Image will be pulled when using the `docker-compose pull` command or `docker-compose up --no-build`
    image: openremote/postgresql:latest

    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Zurich

      # Create database and user if there is no data. For production, run
      # this once with your volume mapping for the data directory (see demo.yml),
      # then remove the variables and restart to preserve the stored data. It
      # doesn't hurt if you don't remove it, an existing will never be reconfigured.
      POSTGRES_DB: openremote
      POSTGRES_USER: openremote
      POSTGRES_PASSWORD: CHANGE_ME_DB_USER_PASSWORD

      # You can open an SQL console on a running container with:
      # docker exec -it <container ID> psql -U openremote

    # Resource limits
    mem_limit: 300m
    memswap_limit: 300m

    # Configure logging of the container
    logging:
        options:
            max-size: 10m
